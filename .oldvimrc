set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
nmap <C-F> <Plug>VimwikiTabnewLink

call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'leafgarland/typescript-vim'
Plugin 'vim-airline/vim-airline'
Plugin 'tpope/vim-surround'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'kovisoft/slimv'
Plugin 'neoclide/coc.nvim'
Plugin 'rking/ag.vim'
Plugin 'tpope/vim-fugitive'

Plugin 'nanotech/jellybeans.vim'
Plugin 'axvr/photon.vim'

" Writing plugins
Plugin 'vimwiki/vimwiki'
Plugin 'junegunn/goyo.vim'
Plugin 'junegunn/limelight.vim'

call vundle#end()            " required

" My settings

let mapleader = "\<Space>"

filetype plugin indent on    " required

syntax on

let g:vimwiki_ext = '.md' " set extension to .md
let g:vimwiki_global_ext = 0
let g:vimwiki_list = [{'path': '~/OneDrive - Microsoft/vimwiki/',
      \ 'syntax': 'markdown',
      \  'ext': '.md',
      \  'diary_rel_path': ''}]
set number
set ignorecase
set smartcase
set autoindent
set tabstop=2
set expandtab
set shiftwidth=2
set hidden
set wildignore=*/node_modules/*,*/node_modules/,/node_modules/*
nnoremap <leader>gt :bn <CR>
nnoremap <leader>gT :bp <CR>
nnoremap <leader>bd :bd <CR>
nnoremap <leader>ve :e $MYVIMRC <CR>
nnoremap <leader>vs :source $MYVIMRC <CR>
c>


let g:netrw_use_errorwindow = 1

" Fugitive

nnoremap <leader>gf :Git<CR>
vnoremap gdl :diffget //3<CR>
vnoremap gdh :diffget //2<CR>
set diffopt+=vertical

" ctrlp mappings
let g:ctrlp_custom_ignore = {
      \ 'dir':  'node_modules\|lib\|lib-commonjs',
      \ }

" goyo mappings
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!
let g:limelight_conceal_ctermfg = 'gray'
let g:goyo_width = 100
let g:goyo_height = "90%"

" coc mappings

" GoTo code navigation.
nmap <silent><leader>gd <Plug>(coc-definition)
nmap <silent><leader>gy <Plug>(coc-type-definition)
nmap <silent><leader>gi <Plug>(coc-implementation)
nmap <silent><leader>gr <Plug>(coc-diagnostic-info)
nnoremap <silent><nowait><leader>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait><leader>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait><leader>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait><leader>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait><leader>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait><leader>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait><leader>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait><leader>p  :<C-u>CocListResume<CR>

" airline mappings
" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1

" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'

autocmd BufRead,BufNewFile *.md setlocal spell

colorscheme jellybeansmap 
